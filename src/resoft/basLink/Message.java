package resoft.basLink;
/**
 * Message
 * @author albert lee
 * */

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import resoft.basLink.util.StringUtil;

/* Generated by Together */

public class Message implements java.lang.Cloneable{
    /**
     * 设置HEAD值
     * */
    public void setHeadValue(String key,String value) {
        headMap.put(key,value);
    }
    /**
     * 得到HEAD键值
     * */
    public String getHeadValue(String key) {
        return (String) headMap.get(key);
    }
    /**
     * 得到Head键值数量
     * */
    public Collection listAllHeadKeys() {
        return headMap.keySet();
    }
    /**
     * 设置键值
     * @param key String 键值
     * @param value String 值
     * */
    public void setValue(String key,String value) {
        remove(key);
        keys.add(key);
        values.add(value);
    }
    /**
     * 设置键值
     * */
    public void setValue(String key,int value) {
        setValue(key,Integer.toString(value));
    }

    /**
     * 将Map中的数据存入
     * */
    public void putAll(Map map) {
        for(Iterator itr = map.keySet().iterator();itr.hasNext();) {
            String key = (String) itr.next();
            String value = (String) map.get(key);
            setValue(key,value);
        }
    }

    /**
     * 根据键值得到值
     * */
    public String getValue(String key) {
        int pos = keys.indexOf(key);
        if(pos>=0) {
            String value = (String) values.get(pos);
            return value==null ? "" : value;
        } else {
            return "";
        }       
    }

    /**
     * 删除指定键值
     * */
    public void remove(String key) {
        int pos = keys.indexOf(key);
        if(pos>=0) {
            keys.remove(pos);
            values.remove(pos);
        }
    }

    /**
     * 列出所有键值
     * */
    public Collection findAll() {
        return keys;
    }

    public void forEach(String prefix,MessageVariableIterator varItr) {
        Collection result = findByPrefix(prefix);
        int max = 0;
        for(Iterator itr = result.iterator();itr.hasNext();) {
            String key = (String) itr.next();
            String value = getValue(key);
            if(value.equals("")) {
                continue;
            }
            int n = StringUtil.getSuffixAsNumber(key);
            if(max<n) {
                max = n;
            }
            varItr.next(prefix,n);
        }
        varItr.end(max);
    }

    /**
     * 根据名称查找以key开头的键值
     * */
    public Collection findByPrefix(String key) {
        Collection result = new ArrayList();
        for(Iterator itr = keys.iterator();itr.hasNext();) {
            String v = (String) itr.next();
            if(v.startsWith(key)) {
                result.add(v);
            }
        }
        return result;
    }

    /**
     * 设置系统属性
     * */
    public void setSysProperty(String name,String value) {
        sysProp.put(name,value);
    }
    /**
     * 得到系统属性
     * */
    public String getSysProperty(String name) {
        String value = (String) sysProp.get(name);
        return value==null? "" : value;
    }

    public Object clone() throws CloneNotSupportedException {
        Message newMsg = new Message();
        for(Iterator itr = keys.iterator();itr.hasNext();) {
            String key = (String) itr.next();
            newMsg.setValue(key,getValue(key));
        }
        for(Iterator itr = headMap.keySet().iterator();itr.hasNext();) {
            String key = (String) itr.next();
            newMsg.setHeadValue(key,getHeadValue(key));
        }
        for(Iterator itr = sysProp.keySet().iterator();itr.hasNext();) {
            String key = (String) itr.next();
            newMsg.setSysProperty(key,getSysProperty(key));
        }
        return newMsg;
    }

    private List keys = new ArrayList();
    private List values = new ArrayList();

    private Map headMap = new HashMap();
    //系统属性。不参与打包
    private Map sysProp = new HashMap();


}
