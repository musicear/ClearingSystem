package resoft.basLink.packer;

import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

import org.xml.sax.Attributes;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;

import resoft.basLink.Message;
import resoft.basLink.PackException;
import resoft.basLink.Packer;

/* Generated by Together */

public class CfxPacker implements Packer {

    private static final boolean ADD_CRCF = true;

    private static SAXParserFactory spf = null;

    static {
        //初始化SAX解析器
        spf = SAXParserFactory.newInstance();
    }

    public CfxPacker(){

    }
    /**
     * 将字节串解析为Message对象
     * */
    public Message pack(byte[] bytes) throws PackException{
        SAXParser saxParser;
        try {
            saxParser = spf.newSAXParser();
        } catch (Exception e) {
            throw new RuntimeException(e.getMessage(),e);
        }
        //SAX
        final Message msg = new Message();
        try {
            saxParser.parse(new InputSource(new StringReader(new String(bytes,"GBK"))),new PackReader(msg));
        } catch (Exception e) {
            throw new PackException("解析失败",e);
        }

        return msg;
    }

    /**
     * SAX Pack Reader
     * */
    private class PackReader extends DefaultHandler{
        PackReader(Message msg) {
            this.msg = msg;
        }

        public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {
            if(qName.equals("HEAD")) {
                isHead = true;
            }
            if(!qName.equals("CFX") && !qName.equals("HEAD") && !qName.equals("MSG") && !qName.equals("PRI")) {
                if(isHead) {
                    //msg.setHeadValue(qName,value);
                    headKey = qName;
                } else {
                    String value = attributes.getValue("val");
                    msg.setValue(qName,value);
                }
            }
        }

        public void characters(char ch[], int start, int length) throws SAXException {
            if(isHead && headKey!=null) {
                String value = new String(ch,start,length);
                msg.setHeadValue(headKey,value);
                headKey = null;
            }
        }

        public void endElement(String uri, String localName, String qName) throws SAXException {
            if(qName.equals("HEAD")) {
                isHead = false;
            }
        }
        private boolean isHead = false;
        private String headKey = null;
        private Message msg;
    }

    public byte[] unpack(Message msg) {
        StringBuffer sb = new StringBuffer("<CFX>");
        //HEAD TAG
        if(msg.listAllHeadKeys().size()>0) {
            sb.append("<HEAD>");
            for(Iterator itr = msg.listAllHeadKeys().iterator();itr.hasNext();) {
                String key = (String) itr.next();
                if(key==null) {
                    continue;
                }
                String value = msg.getHeadValue(key);
                sb.append("<").append(key).append(">").append(value).append("</").append(key).append(">");
            }
            sb.append("</HEAD>");
        }
        //MSG TAG

        sb.append("<MSG>");
        for(Iterator itr = msg.findAll().iterator();itr.hasNext();) {
            String key = (String) itr.next();
            StringBuffer value = new StringBuffer(msg.getValue(key));
            //special char

            replaceAll(value,"&","&amp;");
            replaceAll(value,"<","&lt;");
            replaceAll(value,">","&gt;");
            replaceAll(value,"\"","&quot;");
            //value.replaceAll("&","&amp;").replaceAll("<","&lt;").replaceAll(">","&gt;").replaceAll("\"","&quot;");
            sb.append("<").append(key).append(" val=\"").append(value).append("\"/>");
        }
        sb.append("</MSG>");

        sb.append("</CFX>");

        try {
            return sb.toString().getBytes("GBK");
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
    }
    /**
     * 替换StringBuffer中的字符串
     * */
    private void replaceAll(StringBuffer sb,String findText,String replacement) {
        int pos = sb.indexOf(findText);
        if(pos>=0) {
            sb.replace(pos,pos + findText.length(),replacement);
        }
    }

    /**
     *
     * */
    public byte[] unpackByFile(Message msg) throws PackException{
        String transCode = msg.getValue("交易码");
        return unpackByFile(msg,transCode + ".xml");
    }

    /**
     * 从文件中取得报文格式定义文件
     *
     * @param msg      Message
     * @param filePath String   格式定义文件路径，指其在ClassPath中的相对路径
     */
    public byte[] unpackByFile(Message msg, String filePath) throws PackException {
        filePath = "conf/pack/" + filePath;

        Map formatMap = CfxUnpackFormatCache.getInstance().getFormat(filePath);
        if(formatMap==null) {
            throw new PackException();
        }
        StringBuffer xml = new StringBuffer();
        xml.append("<CFX>");
        //HEAD段
        List headList = (List) formatMap.get("head");
        if(headList.size()>0) {
            xml.append("<HEAD>");
            for(Iterator itr = headList.iterator();itr.hasNext();) {
                String key = (String) itr.next();
                String value = msg.getHeadValue(key);
                if(value!=null && !value.equals("")) {
                    //格式类似<SRC>1000</SRC>
                    xml.append("<").append(key).append(">").append(value).append("</").append(key).append(">");
                }
            }
            xml.append("</HEAD>");
        }
        //MSG段
        List msgList = (List) formatMap.get("msg");
        if(msgList.size()>0) {
            xml.append("<MSG>");
            for(Iterator itr = msgList.iterator();itr.hasNext();) {
                String key = (String) itr.next();
                String value = msg.getValue(key);
                if(value!=null && !value.equals("")) {
                    //格式类似<纳税人编码 val="34234"/>
                    xml.append("<").append(key).append(" val=\"").append(value).append("\"/>");
                }
            }
            xml.append("</MSG>");
        }

        //PRI段
        List priList = (List) formatMap.get("pri");
        if(priList.size()>0) {
            xml.append("<PRI>");
            for(Iterator itr = priList.iterator();itr.hasNext();) {
                String key = (String) itr.next();
                String value = msg.getValue(key);
                if(value!=null && !value.equals("")) {
                    //格式类似<纳税人编码 val="34234"/>
                    xml.append("<").append(key).append(" val=\"").append(value).append("\"/>");
                }
            }
            xml.append("</PRI>");
        }
        xml.append("</CFX>");
        if(ADD_CRCF) {
            xml.append("\r\n");
        }

        try {
            return xml.toString().getBytes("GBK");
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }

    }

}
